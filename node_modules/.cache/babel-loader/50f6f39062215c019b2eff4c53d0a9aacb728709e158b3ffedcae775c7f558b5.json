{"ast":null,"code":"// const baseURL = \"http://localhost:5000\";\nconst baseURL = process.env.REACT_APP_BACKEND_URL || \"http://localhost:5000\";\nconst defaultHeaders = () => ({\n  'Authorization': `Bearer ${localStorage.getItem('token')}`\n});\nexport const modifyBlogPost = async (blogId, title, content) => {\n  try {\n    const response = await fetch(`${baseURL}/blogposts/${blogId}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n        ...defaultHeaders()\n      },\n      body: JSON.stringify({\n        title,\n        content\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"Error modifying blog post:\", error);\n    throw error;\n  }\n};\nexport const deleteBlogPost = async blogId => {\n  try {\n    const response = await fetch(`${baseURL}/blogposts/${blogId}`, {\n      method: 'DELETE',\n      headers: defaultHeaders()\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`, response.status);\n\n      // throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n\n    return response.json();\n  } catch (error) {\n    console.error(\"Error deleting blog post:\", error);\n    throw error;\n  }\n};\n\n// Auth API\nexport const signUp = async (username, password) => {\n  try {\n    const response = await fetch(`${baseURL}/signup`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"Error signing up:\", error);\n    throw error;\n  }\n};\nexport const login = async (username, password) => {\n  try {\n    const response = await fetch(`${baseURL}/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"Error logging in:\", error);\n    throw error;\n  }\n};\nexport const logout = async () => {\n  try {\n    const response = await fetch(`${baseURL}/logout`, {\n      method: 'POST',\n      headers: defaultHeaders()\n    });\n    if (!response.ok) {\n      const text = await response.text();\n      try {\n        const data = JSON.parse(text);\n        throw new Error(data.message || 'Invalid response from server.');\n      } catch {\n        throw new Error(text || 'Invalid response from server.');\n      }\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"Error logging out:\", error);\n    throw error;\n  }\n};\nexport const createBlogPost = async (title, content, image) => {\n  try {\n    const formData = new FormData();\n    formData.append('title', title);\n    formData.append('content', content);\n    if (image) {\n      formData.append('image', image);\n    }\n    const response = await fetch(`${baseURL}/blogposts`, {\n      method: 'POST',\n      headers: {\n        ...defaultHeaders()\n      },\n      body: formData\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to create blog post (HTTP ${response.status})`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"Error creating blog post:\", error);\n    throw error;\n  }\n};\nexport const getBlogPosts = async () => {\n  try {\n    const response = await fetch(`${baseURL}/blogposts`, {\n      headers: defaultHeaders()\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"Error fetching user blog posts:\", error);\n    throw error;\n  }\n};\n\n// Review API\nexport const createReview = async (blogId, reviewText) => {\n  try {\n    const response = await fetch(`${baseURL}/blogposts/${blogId}/reviews`, {\n      method: 'POST',\n      headers: {\n        ...defaultHeaders(),\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        content: reviewText\n      })\n\n      // body: JSON.stringify({ text: reviewText })  // assuming your backend expects the key to be \"text\"\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to create review (HTTP ${response.status})`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"Error creating review:\", error);\n    throw error;\n  }\n};\nexport const getReviews = async blogId => {\n  try {\n    const response = await fetch(`${baseURL}/blogposts/${blogId}/reviews`, {\n      headers: defaultHeaders()\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"Error fetching reviews:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["baseURL","process","env","REACT_APP_BACKEND_URL","defaultHeaders","localStorage","getItem","modifyBlogPost","blogId","title","content","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","json","error","console","deleteBlogPost","signUp","username","password","login","logout","text","data","parse","message","createBlogPost","image","formData","FormData","append","getBlogPosts","createReview","reviewText","getReviews"],"sources":["/home/pius/Blog-Management-System/client/src/apiService.js"],"sourcesContent":["// const baseURL = \"http://localhost:5000\";\nconst baseURL = process.env.REACT_APP_BACKEND_URL || \"http://localhost:5000\";\n\n\nconst defaultHeaders = () => ({\n  'Authorization': `Bearer ${localStorage.getItem('token')}`\n});\n\nexport const modifyBlogPost = async (blogId, title, content) => {\n  try {\n    const response = await fetch(`${baseURL}/blogposts/${blogId}`, {\n      method: 'PATCH',\n      headers: { 'Content-Type': 'application/json', ...defaultHeaders() },\n      body: JSON.stringify({ title, content })\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"Error modifying blog post:\", error);\n    throw error;\n  }\n};\n\nexport const deleteBlogPost = async (blogId) => {\n  try {\n    const response = await fetch(`${baseURL}/blogposts/${blogId}`, {\n      method: 'DELETE',\n      headers: defaultHeaders()\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`, response.status);\n\n      // throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"Error deleting blog post:\", error);\n    throw error;\n  }\n};\n\n// Auth API\nexport const signUp = async (username, password) => {\n  try {\n    const response = await fetch(`${baseURL}/signup`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ username, password })\n    });\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"Error signing up:\", error);\n    throw error;\n  }\n};\n\nexport const login = async (username, password) => {\n  try {\n    const response = await fetch(`${baseURL}/login`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ username, password })\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"Error logging in:\", error);\n    throw error;\n  }\n};\n\nexport const logout = async () => {\n  try {\n    const response = await fetch(`${baseURL}/logout`, { \n      method: 'POST', \n      headers: defaultHeaders() \n    });\n    if (!response.ok) {\n      const text = await response.text();\n      try {\n        const data = JSON.parse(text);\n        throw new Error(data.message || 'Invalid response from server.');\n      } catch {\n        throw new Error(text || 'Invalid response from server.');\n      }\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"Error logging out:\", error);\n    throw error;\n  }\n};\n\n\nexport const createBlogPost = async (title, content, image) => {\n  try {\n    const formData = new FormData();\n    formData.append('title', title);\n    formData.append('content', content);\n    if (image) {\n        formData.append('image', image);\n    }\n\n    const response = await fetch(`${baseURL}/blogposts`, {\n      method: 'POST',\n      headers: {\n          ...defaultHeaders()\n      },\n      body: formData\n  });\n  \n\n    if (!response.ok) {\n        throw new Error(`Failed to create blog post (HTTP ${response.status})`);\n    }\n\n    return response.json();\n  } catch (error) {\n    console.error(\"Error creating blog post:\", error);\n    throw error;\n  }\n};\n\n\n\n\n\nexport const getBlogPosts = async () => {\n  try {\n    const response = await fetch(`${baseURL}/blogposts`, {\n      headers: defaultHeaders()\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"Error fetching user blog posts:\", error);\n    throw error;\n  }\n};\n\n// Review API\nexport const createReview = async (blogId, reviewText) => {\n  try {\n    const response = await fetch(`${baseURL}/blogposts/${blogId}/reviews`, {\n      method: 'POST',\n      headers: {\n        ...defaultHeaders(),\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ content: reviewText })\n\n      // body: JSON.stringify({ text: reviewText })  // assuming your backend expects the key to be \"text\"\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to create review (HTTP ${response.status})`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"Error creating review:\", error);\n    throw error;\n  }\n};\n\n\nexport const getReviews = async (blogId) => {\n  try {\n    \n    const response = await fetch(`${baseURL}/blogposts/${blogId}/reviews`, {\n      headers: defaultHeaders()\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"Error fetching reviews:\", error);\n    throw error;\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}